// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: truststore/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAttestationRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetAttestationRequest) Reset()         { *m = QueryGetAttestationRequest{} }
func (m *QueryGetAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttestationRequest) ProtoMessage()    {}
func (*QueryGetAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{2}
}
func (m *QueryGetAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttestationRequest.Merge(m, src)
}
func (m *QueryGetAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttestationRequest proto.InternalMessageInfo

func (m *QueryGetAttestationRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetAttestationResponse struct {
	Attestation Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation"`
}

func (m *QueryGetAttestationResponse) Reset()         { *m = QueryGetAttestationResponse{} }
func (m *QueryGetAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttestationResponse) ProtoMessage()    {}
func (*QueryGetAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{3}
}
func (m *QueryGetAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttestationResponse.Merge(m, src)
}
func (m *QueryGetAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttestationResponse proto.InternalMessageInfo

func (m *QueryGetAttestationResponse) GetAttestation() Attestation {
	if m != nil {
		return m.Attestation
	}
	return Attestation{}
}

type QueryAllAttestationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestationRequest) Reset()         { *m = QueryAllAttestationRequest{} }
func (m *QueryAllAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestationRequest) ProtoMessage()    {}
func (*QueryAllAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{4}
}
func (m *QueryAllAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestationRequest.Merge(m, src)
}
func (m *QueryAllAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestationRequest proto.InternalMessageInfo

func (m *QueryAllAttestationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAttestationResponse struct {
	Attestation []Attestation       `protobuf:"bytes,1,rep,name=attestation,proto3" json:"attestation"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestationResponse) Reset()         { *m = QueryAllAttestationResponse{} }
func (m *QueryAllAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestationResponse) ProtoMessage()    {}
func (*QueryAllAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{5}
}
func (m *QueryAllAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestationResponse.Merge(m, src)
}
func (m *QueryAllAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestationResponse proto.InternalMessageInfo

func (m *QueryAllAttestationResponse) GetAttestation() []Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

func (m *QueryAllAttestationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIdentifierTypeRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetIdentifierTypeRequest) Reset()         { *m = QueryGetIdentifierTypeRequest{} }
func (m *QueryGetIdentifierTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIdentifierTypeRequest) ProtoMessage()    {}
func (*QueryGetIdentifierTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{6}
}
func (m *QueryGetIdentifierTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIdentifierTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIdentifierTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIdentifierTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIdentifierTypeRequest.Merge(m, src)
}
func (m *QueryGetIdentifierTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIdentifierTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIdentifierTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIdentifierTypeRequest proto.InternalMessageInfo

func (m *QueryGetIdentifierTypeRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetIdentifierTypeResponse struct {
	IdentifierType IdentifierType `protobuf:"bytes,1,opt,name=identifierType,proto3" json:"identifierType"`
}

func (m *QueryGetIdentifierTypeResponse) Reset()         { *m = QueryGetIdentifierTypeResponse{} }
func (m *QueryGetIdentifierTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIdentifierTypeResponse) ProtoMessage()    {}
func (*QueryGetIdentifierTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{7}
}
func (m *QueryGetIdentifierTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIdentifierTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIdentifierTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIdentifierTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIdentifierTypeResponse.Merge(m, src)
}
func (m *QueryGetIdentifierTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIdentifierTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIdentifierTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIdentifierTypeResponse proto.InternalMessageInfo

func (m *QueryGetIdentifierTypeResponse) GetIdentifierType() IdentifierType {
	if m != nil {
		return m.IdentifierType
	}
	return IdentifierType{}
}

type QueryAllIdentifierTypeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIdentifierTypeRequest) Reset()         { *m = QueryAllIdentifierTypeRequest{} }
func (m *QueryAllIdentifierTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIdentifierTypeRequest) ProtoMessage()    {}
func (*QueryAllIdentifierTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{8}
}
func (m *QueryAllIdentifierTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIdentifierTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIdentifierTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIdentifierTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIdentifierTypeRequest.Merge(m, src)
}
func (m *QueryAllIdentifierTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIdentifierTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIdentifierTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIdentifierTypeRequest proto.InternalMessageInfo

func (m *QueryAllIdentifierTypeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIdentifierTypeResponse struct {
	IdentifierType []IdentifierType    `protobuf:"bytes,1,rep,name=identifierType,proto3" json:"identifierType"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIdentifierTypeResponse) Reset()         { *m = QueryAllIdentifierTypeResponse{} }
func (m *QueryAllIdentifierTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIdentifierTypeResponse) ProtoMessage()    {}
func (*QueryAllIdentifierTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{9}
}
func (m *QueryAllIdentifierTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIdentifierTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIdentifierTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIdentifierTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIdentifierTypeResponse.Merge(m, src)
}
func (m *QueryAllIdentifierTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIdentifierTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIdentifierTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIdentifierTypeResponse proto.InternalMessageInfo

func (m *QueryAllIdentifierTypeResponse) GetIdentifierType() []IdentifierType {
	if m != nil {
		return m.IdentifierType
	}
	return nil
}

func (m *QueryAllIdentifierTypeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGlobalRequest struct {
}

func (m *QueryGetGlobalRequest) Reset()         { *m = QueryGetGlobalRequest{} }
func (m *QueryGetGlobalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGlobalRequest) ProtoMessage()    {}
func (*QueryGetGlobalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{10}
}
func (m *QueryGetGlobalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGlobalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGlobalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGlobalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGlobalRequest.Merge(m, src)
}
func (m *QueryGetGlobalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGlobalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGlobalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGlobalRequest proto.InternalMessageInfo

type QueryGetGlobalResponse struct {
	Global Global `protobuf:"bytes,1,opt,name=Global,proto3" json:"Global"`
}

func (m *QueryGetGlobalResponse) Reset()         { *m = QueryGetGlobalResponse{} }
func (m *QueryGetGlobalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGlobalResponse) ProtoMessage()    {}
func (*QueryGetGlobalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{11}
}
func (m *QueryGetGlobalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGlobalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGlobalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGlobalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGlobalResponse.Merge(m, src)
}
func (m *QueryGetGlobalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGlobalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGlobalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGlobalResponse proto.InternalMessageInfo

func (m *QueryGetGlobalResponse) GetGlobal() Global {
	if m != nil {
		return m.Global
	}
	return Global{}
}

type QueryAttestationByCreatorIdentifierRequest struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IdentifierType string `protobuf:"bytes,2,opt,name=identifierType,proto3" json:"identifierType,omitempty"`
	Identifier     string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *QueryAttestationByCreatorIdentifierRequest) Reset() {
	*m = QueryAttestationByCreatorIdentifierRequest{}
}
func (m *QueryAttestationByCreatorIdentifierRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAttestationByCreatorIdentifierRequest) ProtoMessage() {}
func (*QueryAttestationByCreatorIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{12}
}
func (m *QueryAttestationByCreatorIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationByCreatorIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationByCreatorIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationByCreatorIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationByCreatorIdentifierRequest.Merge(m, src)
}
func (m *QueryAttestationByCreatorIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationByCreatorIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationByCreatorIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationByCreatorIdentifierRequest proto.InternalMessageInfo

func (m *QueryAttestationByCreatorIdentifierRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryAttestationByCreatorIdentifierRequest) GetIdentifierType() string {
	if m != nil {
		return m.IdentifierType
	}
	return ""
}

func (m *QueryAttestationByCreatorIdentifierRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type QueryAttestationByCreatorIdentifierResponse struct {
	Attestation *Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *QueryAttestationByCreatorIdentifierResponse) Reset() {
	*m = QueryAttestationByCreatorIdentifierResponse{}
}
func (m *QueryAttestationByCreatorIdentifierResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAttestationByCreatorIdentifierResponse) ProtoMessage() {}
func (*QueryAttestationByCreatorIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{13}
}
func (m *QueryAttestationByCreatorIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationByCreatorIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationByCreatorIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationByCreatorIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationByCreatorIdentifierResponse.Merge(m, src)
}
func (m *QueryAttestationByCreatorIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationByCreatorIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationByCreatorIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationByCreatorIdentifierResponse proto.InternalMessageInfo

func (m *QueryAttestationByCreatorIdentifierResponse) GetAttestation() *Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type QueryAttestationByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryAttestationByCreatorRequest) Reset()         { *m = QueryAttestationByCreatorRequest{} }
func (m *QueryAttestationByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationByCreatorRequest) ProtoMessage()    {}
func (*QueryAttestationByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{14}
}
func (m *QueryAttestationByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationByCreatorRequest.Merge(m, src)
}
func (m *QueryAttestationByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationByCreatorRequest proto.InternalMessageInfo

func (m *QueryAttestationByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryAttestationByCreatorResponse struct {
	Attestations []*Attestation `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *QueryAttestationByCreatorResponse) Reset()         { *m = QueryAttestationByCreatorResponse{} }
func (m *QueryAttestationByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttestationByCreatorResponse) ProtoMessage()    {}
func (*QueryAttestationByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_868e823c4f8730b9, []int{15}
}
func (m *QueryAttestationByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttestationByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttestationByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttestationByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttestationByCreatorResponse.Merge(m, src)
}
func (m *QueryAttestationByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttestationByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttestationByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttestationByCreatorResponse proto.InternalMessageInfo

func (m *QueryAttestationByCreatorResponse) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "blarsy.truststore.truststore.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "blarsy.truststore.truststore.QueryParamsResponse")
	proto.RegisterType((*QueryGetAttestationRequest)(nil), "blarsy.truststore.truststore.QueryGetAttestationRequest")
	proto.RegisterType((*QueryGetAttestationResponse)(nil), "blarsy.truststore.truststore.QueryGetAttestationResponse")
	proto.RegisterType((*QueryAllAttestationRequest)(nil), "blarsy.truststore.truststore.QueryAllAttestationRequest")
	proto.RegisterType((*QueryAllAttestationResponse)(nil), "blarsy.truststore.truststore.QueryAllAttestationResponse")
	proto.RegisterType((*QueryGetIdentifierTypeRequest)(nil), "blarsy.truststore.truststore.QueryGetIdentifierTypeRequest")
	proto.RegisterType((*QueryGetIdentifierTypeResponse)(nil), "blarsy.truststore.truststore.QueryGetIdentifierTypeResponse")
	proto.RegisterType((*QueryAllIdentifierTypeRequest)(nil), "blarsy.truststore.truststore.QueryAllIdentifierTypeRequest")
	proto.RegisterType((*QueryAllIdentifierTypeResponse)(nil), "blarsy.truststore.truststore.QueryAllIdentifierTypeResponse")
	proto.RegisterType((*QueryGetGlobalRequest)(nil), "blarsy.truststore.truststore.QueryGetGlobalRequest")
	proto.RegisterType((*QueryGetGlobalResponse)(nil), "blarsy.truststore.truststore.QueryGetGlobalResponse")
	proto.RegisterType((*QueryAttestationByCreatorIdentifierRequest)(nil), "blarsy.truststore.truststore.QueryAttestationByCreatorIdentifierRequest")
	proto.RegisterType((*QueryAttestationByCreatorIdentifierResponse)(nil), "blarsy.truststore.truststore.QueryAttestationByCreatorIdentifierResponse")
	proto.RegisterType((*QueryAttestationByCreatorRequest)(nil), "blarsy.truststore.truststore.QueryAttestationByCreatorRequest")
	proto.RegisterType((*QueryAttestationByCreatorResponse)(nil), "blarsy.truststore.truststore.QueryAttestationByCreatorResponse")
}

func init() { proto.RegisterFile("truststore/query.proto", fileDescriptor_868e823c4f8730b9) }

var fileDescriptor_868e823c4f8730b9 = []byte{
	// 873 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x4f, 0xdc, 0x46,
	0x14, 0x5e, 0x2f, 0x85, 0xaa, 0x0f, 0x84, 0xd4, 0xe9, 0x16, 0x90, 0x4b, 0x5d, 0x6a, 0x21, 0x5a,
	0x7e, 0xd4, 0xee, 0x42, 0x51, 0x8b, 0xa0, 0xb4, 0x4b, 0x25, 0x28, 0xaa, 0x2a, 0xc1, 0xaa, 0x97,
	0xa2, 0x48, 0x2b, 0x2f, 0x4c, 0x1c, 0x4b, 0x66, 0xc7, 0xd8, 0xb3, 0x11, 0x1b, 0xc2, 0x25, 0x7f,
	0x40, 0x14, 0x29, 0xc7, 0x9c, 0x72, 0xc9, 0xdf, 0x90, 0x1c, 0x72, 0x44, 0x42, 0x39, 0x21, 0xe5,
	0x92, 0x53, 0x12, 0x01, 0x7f, 0x48, 0xb4, 0x33, 0x63, 0x3c, 0x5e, 0xbc, 0xc6, 0xbb, 0xec, 0x6d,
	0x3d, 0x33, 0xdf, 0x7b, 0xdf, 0xf7, 0xbd, 0xf1, 0x7b, 0x5e, 0x18, 0xa1, 0x7e, 0x3d, 0xa0, 0x01,
	0x25, 0x3e, 0x36, 0x0f, 0xea, 0xd8, 0x6f, 0x18, 0x9e, 0x4f, 0x28, 0x41, 0xe3, 0x55, 0xd7, 0xf2,
	0x83, 0x86, 0x11, 0x6d, 0x4b, 0x3f, 0xd5, 0x82, 0x4d, 0x6c, 0xc2, 0x0e, 0x9a, 0xcd, 0x5f, 0x1c,
	0xa3, 0x8e, 0xdb, 0x84, 0xd8, 0x2e, 0x36, 0x2d, 0xcf, 0x31, 0xad, 0x5a, 0x8d, 0x50, 0x8b, 0x3a,
	0xa4, 0x16, 0x88, 0xdd, 0x99, 0x5d, 0x12, 0xec, 0x93, 0xc0, 0xac, 0x5a, 0x81, 0x48, 0x65, 0xde,
	0x2f, 0x56, 0x31, 0xb5, 0x8a, 0xa6, 0x67, 0xd9, 0x4e, 0x8d, 0x1d, 0x16, 0x67, 0x47, 0x25, 0x56,
	0x9e, 0xe5, 0x5b, 0xfb, 0x61, 0x90, 0x09, 0x69, 0xc3, 0xd9, 0xc3, 0x35, 0xea, 0xdc, 0x75, 0xb0,
	0x5f, 0xa1, 0x0d, 0x0f, 0x27, 0x40, 0x6d, 0x97, 0x54, 0x2d, 0x37, 0x64, 0x27, 0x6d, 0x58, 0x94,
	0xe2, 0x80, 0x4a, 0x19, 0xf5, 0x02, 0xa0, 0xed, 0x26, 0xa7, 0x2d, 0x96, 0xad, 0x8c, 0x0f, 0xea,
	0x38, 0xa0, 0xfa, 0xff, 0xf0, 0x55, 0x6c, 0x35, 0xf0, 0x48, 0x2d, 0xc0, 0x68, 0x0d, 0x06, 0x38,
	0xab, 0x31, 0x65, 0x42, 0xf9, 0x71, 0x70, 0x7e, 0xd2, 0x48, 0x73, 0xcb, 0xe0, 0xe8, 0xb5, 0xcf,
	0x4e, 0xdf, 0x7f, 0x97, 0x2b, 0x0b, 0xa4, 0x3e, 0x0f, 0x2a, 0x0b, 0xbd, 0x81, 0x69, 0x29, 0x62,
	0x23, 0x12, 0xa3, 0x02, 0xf4, 0x3b, 0xb5, 0x3d, 0x7c, 0xc8, 0x12, 0x7c, 0x51, 0xe6, 0x0f, 0xba,
	0x07, 0xdf, 0x24, 0x62, 0x04, 0xad, 0x6d, 0x18, 0x94, 0x84, 0x09, 0x6e, 0xd3, 0xe9, 0xdc, 0xa4,
	0x38, 0x82, 0xa0, 0x1c, 0x43, 0xdf, 0x13, 0x2c, 0x4b, 0xae, 0x9b, 0xc0, 0x72, 0x1d, 0x20, 0x2a,
	0x9d, 0xc8, 0x37, 0x65, 0xf0, 0x3a, 0x1b, 0xcd, 0x3a, 0x1b, 0xfc, 0x4a, 0x89, 0x3a, 0x1b, 0x5b,
	0x96, 0x8d, 0x05, 0xb6, 0x2c, 0x21, 0xf5, 0x57, 0x8a, 0x10, 0xd6, 0x9a, 0xa6, 0x9d, 0xb0, 0xbe,
	0xdb, 0x0a, 0x43, 0x1b, 0x31, 0xea, 0x79, 0x46, 0xfd, 0x87, 0x1b, 0xa9, 0x73, 0x3e, 0x31, 0xee,
	0x8b, 0xf0, 0x6d, 0x58, 0x93, 0xcd, 0xab, 0x0b, 0xf9, 0x5f, 0xc3, 0xc3, 0xe9, 0xa5, 0x7c, 0x08,
	0x5a, 0x3b, 0x98, 0x10, 0xbd, 0x03, 0xc3, 0x4e, 0x6c, 0x47, 0x18, 0x3c, 0x97, 0xae, 0x3b, 0x1e,
	0x4d, 0x48, 0x6f, 0x89, 0xa4, 0xdb, 0x82, 0x74, 0xc9, 0x75, 0x93, 0x49, 0xf7, 0xaa, 0xb2, 0x27,
	0x8a, 0xd0, 0x99, 0x90, 0x29, 0x45, 0x67, 0x5f, 0x6f, 0x74, 0xf6, 0xae, 0xca, 0xa3, 0xf0, 0x75,
	0x58, 0xae, 0x0d, 0xd6, 0x54, 0xc2, 0x0e, 0x71, 0x07, 0x46, 0x5a, 0x37, 0xa2, 0x26, 0xc1, 0x57,
	0xb2, 0x35, 0x09, 0x7e, 0x36, 0x6c, 0x12, 0xfc, 0x49, 0x7f, 0xac, 0xc0, 0x0c, 0xb7, 0x4f, 0xba,
	0xcd, 0x8d, 0xbf, 0x7c, 0x6c, 0x51, 0xe2, 0x47, 0x0e, 0x84, 0x55, 0x1b, 0x83, 0xcf, 0x77, 0xf9,
	0x9e, 0xb8, 0x6c, 0xe1, 0x23, 0x9a, 0xba, 0x66, 0x72, 0x9e, 0x1d, 0x68, 0x35, 0x4c, 0x03, 0x88,
	0x56, 0xc6, 0xfa, 0xd8, 0x19, 0x69, 0x45, 0x7f, 0x00, 0xb3, 0x99, 0xf8, 0x08, 0x0f, 0xfe, 0xb9,
	0x5d, 0x47, 0x8a, 0xf7, 0xa2, 0x15, 0x98, 0x68, 0x9b, 0xfb, 0x46, 0x07, 0x74, 0x1f, 0xbe, 0x4f,
	0x41, 0x0b, 0xbe, 0xff, 0xc2, 0x90, 0x94, 0x31, 0xe8, 0xb8, 0xd3, 0x94, 0x63, 0xf0, 0xf9, 0xcb,
	0x21, 0xe8, 0x67, 0x49, 0xd1, 0x33, 0x05, 0x06, 0xf8, 0x18, 0x40, 0x3f, 0xa7, 0x47, 0xbb, 0x3e,
	0x85, 0xd4, 0x62, 0x07, 0x08, 0x2e, 0x44, 0x9f, 0x7b, 0xf4, 0xf6, 0xf2, 0x69, 0x7e, 0x0a, 0x4d,
	0x9a, 0x1c, 0x6a, 0x4a, 0xc3, 0xef, 0xda, 0x6c, 0x45, 0xaf, 0x15, 0x18, 0x94, 0x54, 0xa0, 0xdf,
	0x32, 0x24, 0x4c, 0x9c, 0x5b, 0xea, 0x52, 0x17, 0x48, 0x41, 0x79, 0x89, 0x51, 0x5e, 0x40, 0xc5,
	0x74, 0xca, 0x92, 0xc1, 0xe6, 0x11, 0xeb, 0xa5, 0xc7, 0xe8, 0xa5, 0x02, 0xc3, 0x52, 0xc8, 0x92,
	0xeb, 0x66, 0x92, 0x90, 0x38, 0xd4, 0x32, 0x49, 0x48, 0x9e, 0x53, 0x7a, 0x91, 0x49, 0x98, 0x45,
	0xd3, 0x99, 0x25, 0xa0, 0x37, 0x0a, 0x0c, 0xc7, 0x5b, 0x19, 0x5a, 0xce, 0xe6, 0x61, 0x62, 0xe3,
	0x56, 0x57, 0xba, 0x03, 0x0b, 0x01, 0xbf, 0x33, 0x01, 0xbf, 0xa2, 0xc5, 0x74, 0x01, 0x2d, 0x5f,
	0x5e, 0x57, 0x75, 0x38, 0x51, 0xe0, 0xcb, 0x78, 0xe4, 0x66, 0x29, 0x96, 0xb3, 0x19, 0xda, 0xbd,
	0x9e, 0xb6, 0xb3, 0x45, 0x5f, 0x64, 0x7a, 0x4c, 0xf4, 0x53, 0x47, 0x7a, 0xd0, 0x73, 0x25, 0xec,
	0xdd, 0x68, 0x21, 0x9b, 0x9f, 0xb1, 0xa1, 0xa0, 0xfe, 0xd2, 0x19, 0xa8, 0xb3, 0x77, 0x96, 0x7f,
	0xd4, 0xa2, 0x17, 0x79, 0xd0, 0xd2, 0xbb, 0x30, 0xfa, 0x3b, 0x8b, 0x77, 0x59, 0x06, 0x8b, 0xba,
	0xd9, 0x83, 0x48, 0x42, 0x25, 0x61, 0x2a, 0x1d, 0x64, 0x67, 0x7e, 0x47, 0x2a, 0xd5, 0x46, 0x45,
	0x74, 0xf1, 0x4a, 0x54, 0x29, 0xf3, 0x48, 0xac, 0x1d, 0x9b, 0x47, 0xf1, 0x21, 0x16, 0x5b, 0x38,
	0x46, 0x1f, 0x14, 0x28, 0x24, 0x71, 0x43, 0xab, 0x5d, 0x8a, 0x0a, 0x4d, 0xf9, 0xa3, 0x6b, 0xbc,
	0xb0, 0x62, 0x9d, 0x59, 0xf1, 0x27, 0x5a, 0xed, 0xc6, 0x8a, 0x48, 0xff, 0xda, 0xe6, 0xe9, 0xb9,
	0xa6, 0x9c, 0x9d, 0x6b, 0xca, 0xc7, 0x73, 0x4d, 0x79, 0x72, 0xa1, 0xe5, 0xce, 0x2e, 0xb4, 0xdc,
	0xbb, 0x0b, 0x2d, 0xb7, 0x63, 0xda, 0x0e, 0xbd, 0x57, 0xaf, 0x1a, 0xbb, 0x64, 0x3f, 0x21, 0xc7,
	0x61, 0x2c, 0x61, 0xc3, 0xc3, 0x41, 0x75, 0x80, 0xfd, 0x1b, 0x5a, 0xf8, 0x14, 0x00, 0x00, 0xff,
	0xff, 0x14, 0x88, 0x0d, 0xa5, 0x17, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Attestation by index.
	Attestation(ctx context.Context, in *QueryGetAttestationRequest, opts ...grpc.CallOption) (*QueryGetAttestationResponse, error)
	// Queries a list of Attestation items.
	AttestationAll(ctx context.Context, in *QueryAllAttestationRequest, opts ...grpc.CallOption) (*QueryAllAttestationResponse, error)
	// Queries a IdentifierType by index.
	IdentifierType(ctx context.Context, in *QueryGetIdentifierTypeRequest, opts ...grpc.CallOption) (*QueryGetIdentifierTypeResponse, error)
	// Queries a list of IdentifierType items.
	IdentifierTypeAll(ctx context.Context, in *QueryAllIdentifierTypeRequest, opts ...grpc.CallOption) (*QueryAllIdentifierTypeResponse, error)
	// Queries a Global by index.
	Global(ctx context.Context, in *QueryGetGlobalRequest, opts ...grpc.CallOption) (*QueryGetGlobalResponse, error)
	// Queries a list of AttestationByCreatorIdentifier items.
	AttestationByCreatorIdentifier(ctx context.Context, in *QueryAttestationByCreatorIdentifierRequest, opts ...grpc.CallOption) (*QueryAttestationByCreatorIdentifierResponse, error)
	// Queries a list of AttestationByCreator items.
	AttestationByCreator(ctx context.Context, in *QueryAttestationByCreatorRequest, opts ...grpc.CallOption) (*QueryAttestationByCreatorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attestation(ctx context.Context, in *QueryGetAttestationRequest, opts ...grpc.CallOption) (*QueryGetAttestationResponse, error) {
	out := new(QueryGetAttestationResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/Attestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationAll(ctx context.Context, in *QueryAllAttestationRequest, opts ...grpc.CallOption) (*QueryAllAttestationResponse, error) {
	out := new(QueryAllAttestationResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/AttestationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentifierType(ctx context.Context, in *QueryGetIdentifierTypeRequest, opts ...grpc.CallOption) (*QueryGetIdentifierTypeResponse, error) {
	out := new(QueryGetIdentifierTypeResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/IdentifierType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentifierTypeAll(ctx context.Context, in *QueryAllIdentifierTypeRequest, opts ...grpc.CallOption) (*QueryAllIdentifierTypeResponse, error) {
	out := new(QueryAllIdentifierTypeResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/IdentifierTypeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Global(ctx context.Context, in *QueryGetGlobalRequest, opts ...grpc.CallOption) (*QueryGetGlobalResponse, error) {
	out := new(QueryGetGlobalResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/Global", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationByCreatorIdentifier(ctx context.Context, in *QueryAttestationByCreatorIdentifierRequest, opts ...grpc.CallOption) (*QueryAttestationByCreatorIdentifierResponse, error) {
	out := new(QueryAttestationByCreatorIdentifierResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/AttestationByCreatorIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationByCreator(ctx context.Context, in *QueryAttestationByCreatorRequest, opts ...grpc.CallOption) (*QueryAttestationByCreatorResponse, error) {
	out := new(QueryAttestationByCreatorResponse)
	err := c.cc.Invoke(ctx, "/blarsy.truststore.truststore.Query/AttestationByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Attestation by index.
	Attestation(context.Context, *QueryGetAttestationRequest) (*QueryGetAttestationResponse, error)
	// Queries a list of Attestation items.
	AttestationAll(context.Context, *QueryAllAttestationRequest) (*QueryAllAttestationResponse, error)
	// Queries a IdentifierType by index.
	IdentifierType(context.Context, *QueryGetIdentifierTypeRequest) (*QueryGetIdentifierTypeResponse, error)
	// Queries a list of IdentifierType items.
	IdentifierTypeAll(context.Context, *QueryAllIdentifierTypeRequest) (*QueryAllIdentifierTypeResponse, error)
	// Queries a Global by index.
	Global(context.Context, *QueryGetGlobalRequest) (*QueryGetGlobalResponse, error)
	// Queries a list of AttestationByCreatorIdentifier items.
	AttestationByCreatorIdentifier(context.Context, *QueryAttestationByCreatorIdentifierRequest) (*QueryAttestationByCreatorIdentifierResponse, error)
	// Queries a list of AttestationByCreator items.
	AttestationByCreator(context.Context, *QueryAttestationByCreatorRequest) (*QueryAttestationByCreatorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Attestation(ctx context.Context, req *QueryGetAttestationRequest) (*QueryGetAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attestation not implemented")
}
func (*UnimplementedQueryServer) AttestationAll(ctx context.Context, req *QueryAllAttestationRequest) (*QueryAllAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationAll not implemented")
}
func (*UnimplementedQueryServer) IdentifierType(ctx context.Context, req *QueryGetIdentifierTypeRequest) (*QueryGetIdentifierTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentifierType not implemented")
}
func (*UnimplementedQueryServer) IdentifierTypeAll(ctx context.Context, req *QueryAllIdentifierTypeRequest) (*QueryAllIdentifierTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentifierTypeAll not implemented")
}
func (*UnimplementedQueryServer) Global(ctx context.Context, req *QueryGetGlobalRequest) (*QueryGetGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Global not implemented")
}
func (*UnimplementedQueryServer) AttestationByCreatorIdentifier(ctx context.Context, req *QueryAttestationByCreatorIdentifierRequest) (*QueryAttestationByCreatorIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationByCreatorIdentifier not implemented")
}
func (*UnimplementedQueryServer) AttestationByCreator(ctx context.Context, req *QueryAttestationByCreatorRequest) (*QueryAttestationByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationByCreator not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/Attestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attestation(ctx, req.(*QueryGetAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/AttestationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationAll(ctx, req.(*QueryAllAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentifierType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIdentifierTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentifierType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/IdentifierType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentifierType(ctx, req.(*QueryGetIdentifierTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentifierTypeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIdentifierTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentifierTypeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/IdentifierTypeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentifierTypeAll(ctx, req.(*QueryAllIdentifierTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Global_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Global(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/Global",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Global(ctx, req.(*QueryGetGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationByCreatorIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationByCreatorIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationByCreatorIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/AttestationByCreatorIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationByCreatorIdentifier(ctx, req.(*QueryAttestationByCreatorIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttestationByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blarsy.truststore.truststore.Query/AttestationByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationByCreator(ctx, req.(*QueryAttestationByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blarsy.truststore.truststore.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Attestation",
			Handler:    _Query_Attestation_Handler,
		},
		{
			MethodName: "AttestationAll",
			Handler:    _Query_AttestationAll_Handler,
		},
		{
			MethodName: "IdentifierType",
			Handler:    _Query_IdentifierType_Handler,
		},
		{
			MethodName: "IdentifierTypeAll",
			Handler:    _Query_IdentifierTypeAll_Handler,
		},
		{
			MethodName: "Global",
			Handler:    _Query_Global_Handler,
		},
		{
			MethodName: "AttestationByCreatorIdentifier",
			Handler:    _Query_AttestationByCreatorIdentifier_Handler,
		},
		{
			MethodName: "AttestationByCreator",
			Handler:    _Query_AttestationByCreator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "truststore/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attestation) > 0 {
		for iNdEx := len(m.Attestation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIdentifierTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIdentifierTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIdentifierTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIdentifierTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIdentifierTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIdentifierTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IdentifierType.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIdentifierTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIdentifierTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIdentifierTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIdentifierTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIdentifierTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIdentifierTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentifierType) > 0 {
		for iNdEx := len(m.IdentifierType) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IdentifierType[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGlobalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGlobalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGlobalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetGlobalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGlobalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGlobalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Global.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAttestationByCreatorIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationByCreatorIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationByCreatorIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdentifierType) > 0 {
		i -= len(m.IdentifierType)
		copy(dAtA[i:], m.IdentifierType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IdentifierType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationByCreatorIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationByCreatorIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationByCreatorIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attestation != nil {
		{
			size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttestationByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttestationByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttestationByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Attestation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestation) > 0 {
		for _, e := range m.Attestation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIdentifierTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIdentifierTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IdentifierType.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIdentifierTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIdentifierTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IdentifierType) > 0 {
		for _, e := range m.IdentifierType {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGlobalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetGlobalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Global.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAttestationByCreatorIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IdentifierType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttestationByCreatorIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attestation != nil {
		l = m.Attestation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttestationByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttestationByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestation = append(m.Attestation, Attestation{})
			if err := m.Attestation[len(m.Attestation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIdentifierTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIdentifierTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIdentifierTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIdentifierTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIdentifierTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIdentifierTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IdentifierType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIdentifierTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIdentifierTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIdentifierTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIdentifierTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIdentifierTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIdentifierTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierType = append(m.IdentifierType, IdentifierType{})
			if err := m.IdentifierType[len(m.IdentifierType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGlobalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGlobalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGlobalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGlobalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGlobalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGlobalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Global.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationByCreatorIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationByCreatorIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationByCreatorIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentifierType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentifierType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationByCreatorIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationByCreatorIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationByCreatorIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attestation == nil {
				m.Attestation = &Attestation{}
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttestationByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttestationByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttestationByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
