// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/truststore/keeper/msg_server_create_attestation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/blarsy/truststore/x/truststore/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIdentifierTypeGetter is a mock of IdentifierTypeGetter interface.
type MockIdentifierTypeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifierTypeGetterMockRecorder
}

// MockIdentifierTypeGetterMockRecorder is the mock recorder for MockIdentifierTypeGetter.
type MockIdentifierTypeGetterMockRecorder struct {
	mock *MockIdentifierTypeGetter
}

// NewMockIdentifierTypeGetter creates a new mock instance.
func NewMockIdentifierTypeGetter(ctrl *gomock.Controller) *MockIdentifierTypeGetter {
	mock := &MockIdentifierTypeGetter{ctrl: ctrl}
	mock.recorder = &MockIdentifierTypeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifierTypeGetter) EXPECT() *MockIdentifierTypeGetterMockRecorder {
	return m.recorder
}

// GetIdentifierType mocks base method.
func (m *MockIdentifierTypeGetter) GetIdentifierType(arg0 types0.Context, arg1 string) (types.IdentifierType, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentifierType", arg0, arg1)
	ret0, _ := ret[0].(types.IdentifierType)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIdentifierType indicates an expected call of GetIdentifierType.
func (mr *MockIdentifierTypeGetterMockRecorder) GetIdentifierType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentifierType", reflect.TypeOf((*MockIdentifierTypeGetter)(nil).GetIdentifierType), arg0, arg1)
}

// MockAttestationCreator is a mock of AttestationCreator interface.
type MockAttestationCreator struct {
	ctrl     *gomock.Controller
	recorder *MockAttestationCreatorMockRecorder
}

// MockAttestationCreatorMockRecorder is the mock recorder for MockAttestationCreator.
type MockAttestationCreatorMockRecorder struct {
	mock *MockAttestationCreator
}

// NewMockAttestationCreator creates a new mock instance.
func NewMockAttestationCreator(ctrl *gomock.Controller) *MockAttestationCreator {
	mock := &MockAttestationCreator{ctrl: ctrl}
	mock.recorder = &MockAttestationCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttestationCreator) EXPECT() *MockAttestationCreatorMockRecorder {
	return m.recorder
}

// CreatorHasAttestation mocks base method.
func (m *MockAttestationCreator) CreatorHasAttestation(ctx types0.Context, creator, identifierType, identifier string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatorHasAttestation", ctx, creator, identifierType, identifier)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreatorHasAttestation indicates an expected call of CreatorHasAttestation.
func (mr *MockAttestationCreatorMockRecorder) CreatorHasAttestation(ctx, creator, identifierType, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorHasAttestation", reflect.TypeOf((*MockAttestationCreator)(nil).CreatorHasAttestation), ctx, creator, identifierType, identifier)
}

// GetGlobal mocks base method.
func (m *MockAttestationCreator) GetGlobal(arg0 types0.Context) (types.Global, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobal", arg0)
	ret0, _ := ret[0].(types.Global)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGlobal indicates an expected call of GetGlobal.
func (mr *MockAttestationCreatorMockRecorder) GetGlobal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobal", reflect.TypeOf((*MockAttestationCreator)(nil).GetGlobal), arg0)
}

// GetIdentifierType mocks base method.
func (m *MockAttestationCreator) GetIdentifierType(arg0 types0.Context, arg1 string) (types.IdentifierType, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentifierType", arg0, arg1)
	ret0, _ := ret[0].(types.IdentifierType)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIdentifierType indicates an expected call of GetIdentifierType.
func (mr *MockAttestationCreatorMockRecorder) GetIdentifierType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentifierType", reflect.TypeOf((*MockAttestationCreator)(nil).GetIdentifierType), arg0, arg1)
}

// SetAttestation mocks base method.
func (m *MockAttestationCreator) SetAttestation(arg0 types0.Context, arg1 types.Attestation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAttestation", arg0, arg1)
}

// SetAttestation indicates an expected call of SetAttestation.
func (mr *MockAttestationCreatorMockRecorder) SetAttestation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttestation", reflect.TypeOf((*MockAttestationCreator)(nil).SetAttestation), arg0, arg1)
}

// SetGlobal mocks base method.
func (m *MockAttestationCreator) SetGlobal(arg0 types0.Context, arg1 types.Global) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGlobal", arg0, arg1)
}

// SetGlobal indicates an expected call of SetGlobal.
func (mr *MockAttestationCreatorMockRecorder) SetGlobal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobal", reflect.TypeOf((*MockAttestationCreator)(nil).SetGlobal), arg0, arg1)
}
